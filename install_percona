#!/bin/bash


logfile="install.log"
START_TIMEOUT=120
# Check if sudo is installed or if we are running as root

#######################################
# Show script usage info.       
#######################################
usage() {                       
  cat <<EOF             
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-i] [-b]
This tool is used to take online backups and can be used to restore a backup as well.
Available options:      
-h, --help          Print this help and exit
-v, --verbose       Print script debug info 
-i, --interactive   Run the script interactively to prompt the user for configuration values (not implemented)
-b, --backup	    Install Percona XtraBackup package in addition to database server
EOF
  exit                  
}                       
                        
####################################### 
# Accept and parse script's params.
#######################################
parse_params() {                
  while :; do           
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
#    -i | --interactive) interactive=1 ;;
    -b | --backup) install_backup=true
      shift
      ;;
    -?*) die "Unknown option: ${1}" ;;
    *) break ;;
    esac
    shift
  done  
        
  args=("${@}")
        
  return 0
}       

check_command() {
  command -v "${@}" 1>/dev/null
}

#######################################
# Runs command as root.
#######################################
run_root() {
  sh='sh -c'
  if [ "$(id -un)" != 'root' ]; then
    if check_command sudo; then
      sh='sudo -E sh -c'
    elif check_command su; then
      sh='su -c'
    else
      die "${RED}ERROR: root rights needed to run \"${*}\" command ${NOFORMAT}"
    fi
  fi
  ${sh} "${@}" &>>${logfile}
}

#######################################
# Defines colours for output messages.
#######################################
setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m'
    BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

#######################################
# Prints message to stderr with new line at the end.
#######################################
msg() {
  echo >&2 -e "${1-}"
}

#######################################
# Prints message and exit with code.
# Arguments:
#   message string;
#   exit code.
# Outputs:
#   writes message to stderr.
#######################################
die() {
  local msg=${1}
  local code=${2-1} # default exit status 1
  msg "${msg}"
  exit "${code}"
}

#########################################
# Install PXB
#########################################
install_pxb() {
  msg "${GREEN}Starting ${NOFORMAT} installation of Percona XtraBackup"
  if run_root "yum install -y percona-xtrabackup-80"; then
	  msg "${GREEN}Completed ${NOFORMAT} installation of Percona XtraBackup"
  else 
	  msg "${RED}FAILED ${NOFORMAT} instatlation of Percona XtraBackup"
  fi

}


#########################################
# Install PS
#########################################
install_ps() {

  msg "${GREEN}Starting ${NOFORMAT} installation of Percona Server"
  SUDO=sudo
	MYSQL_SERVICE_NAME=""
	if [ -f /usr/bin/yum ]; then
		MYSQL_SERVICE_NAME=mysqld
		if [ ! -f /usr/bin/sudo ]; then
			if [[ $(id -u) -eq 0 ]]; then
				SUDO=""
			else
				yum install -y sudo
			fi
		fi

		# Install Percona Server
		${SUDO} yum install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm which &&
		${SUDO} percona-release setup -y ps80 &&
		${SUDO} yum install -y percona-server-server
	else
		MYSQL_SERVICE_NAME=mysql
		if [ ! -f /usr/bin/sudo ]; then
			if [[ $(id -u) -eq 0 ]];
			then
				SUDO=""
			else
				apt update
				apt install -y sudo
			fi
		fi
		# Install Percona Server
		${SUDO} DEBIAN_FRONTEND=noninteractive apt update
		${SUDO} DEBIAN_FRONTEND=noninteractive apt install -y gnupg2 lsb-release curl
		${SUDO} curl https://repo.percona.com/apt/percona-release_latest.$(lsb_release -sc)_all.deb -o percona-release_latest.$(lsb_release -sc)_all.deb
		${SUDO} dpkg -i percona-release_latest.$(lsb_release -sc)_all.deb
		${SUDO} percona-release setup ps80
		${SUDO} DEBIAN_FRONTEND=noninteractive apt install -y percona-server-server

	fi

	# Start Percona Server
	if which mysqld > /dev/null 2>&1;
	then
		if which systemctl > /dev/null 2>&1;
		then
			${SUDO} systemctl start mysqld > /dev/null 2>&1;
		elif which service > /dev/null 2>&1;
		then
			${SUDO} service mysqld start > /dev/null 2>&1;
		fi

		# Check if mysqld is running
		if ! mysqladmin -u root ping > /dev/null 2>&1;
		then
			[ ! "$(ls -A /var/lib/mysql)" ] && ${SUDO} mysqld --user=mysql --initialize-insecure

			${SUDO} mysqld --user=mysql &
		fi

		for i in $(seq ${START_TIMEOUT});
		do
			if ! mysqladmin -u root ping > /dev/null 2>&1;
			then
				sleep 1;
			else
				break;
			fi
		done
		
		if [[ ${i} -ne ${START_TIMEOUT} ]];
		then
			echo "Percona Server Installed!"
			echo ""
			echo "To connect to your server, type:"
			echo "mysql -u root"
			echo ""
	    msg "${GREEN}Completed ${NOFORMAT} installation of Percona XtraBackup"
			exit 0
		fi
	fi

	msg "${RED}FAILED ${NOFORMAT} instatlation of Percona XtraBackup"
	exit 1
} 

############################
# Start of Program
############################
main() {
	setup_colors
	#install_ps
	if [ ${install_backup} ] ; then
		install_pxb	
	fi
}

parse_params "${@}"
main
die "Thank you for using Percona Software!" 0
